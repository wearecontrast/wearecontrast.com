@mixin bg-cover($variant: null) {
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center center;

  @if ($variant == fixed) {
    background-attachment: fixed;
  }
}






/**
 * Undercover List mixin
 *
 * 1) Should be applied to a <ul> or <ol> element
 */

@mixin undercover-list {
  list-style-type: none;
  margin-left: 0; margin-bottom: 0;

  & > li {
    padding:0;
  }
}






/**
 * Tint bg mixin
 *
 * Include this when you've got a background image that needs darkening a tad
 *  to make sure light text on top of this is legible.
 *
 * 1) Set the positioning context...
 *  1a) ...so we can absolutely position our pseudo ::after element within this
 *       context...
 *  1b) ...that darkens the bg a little.
 * 2) Due to adding an overlay tint, we now need to raise everything else above
 *     this, otherwise they'll get darkened too. There's no nice way of doing
 *     this, here we use a descendant selector, which may provide specificity
 *     issues down the line. But it's the best I can think of right now.
 *  2a) Raise it on up.
 */

@mixin tint-bg($color: my-color(greyscale, black), $blend-mode: false, $opacity: 0.75, $pseudo: before) {
  $lightness: check-lightness($color);

  position: relative; /* [1] */

  &::#{$pseudo} {
    @include absolute-full; /* [1a] */

    content: '';
    background-color: rgba($color, $opacity); /* [1b] */

    @if ($blend-mode == auto) {
      @if ($lightness == dark) {
        mix-blend-mode: darken;
      } @else {
        mix-blend-mode: lighten;
      }
    } @else if ($blend-mode){
      mix-blend-mode: $blend-mode;
    }
  }

  & > * { /* [2] */
    position: relative;
    z-index: map-get($my-z-index, grass); /* [2a] */
  }
}






/**
 * Last child mixin
 *
 * Enables us to access all the last children, to three levels. Useful to
 *  make sure elements inside elements are selected, like a button inside a
 *  form.
 *
 * Primarily used to remove the space at the bottom of an element.
 *
 * Usage:
 * =============================================================================
 * @include last-child {
 *   margin-bottom: 0;
 * }
 * =============================================================================
 *
 * Originally grabbed form CSS Tricks:
 *  https://css-tricks.com/spacing-the-bottom-of-modules/
 */

@mixin last-child {
  & > *:last-child,
  & > *:last-child > *:last-child,
  & > *:last-child > *:last-child > *:last-child {
    @content
  }
}






/**
 * Absolute full mixin
 *
 * This mixin allows us to include an absolutely positioned element and pass
 *  in optional parameters to set each of the top/right/bottom/left properties
 *
 * 1) Optional parameters for top/right/bottom/left
 * 2) If null is passed for any of the parameters then don't specify that
 *      property, else do specify it
 *      (this allows us to only set the parameters we want)
 */

@mixin absolute-full($top:    0,
                     $right:  0,
                     $bottom: 0,
                     $left:   0) { /* [1] */
  position: absolute;
  @if ($top    != null) { top:    $top; } /* [2] */
  @if ($right  != null) { right:  $right; } /* [2] */
  @if ($bottom != null) { bottom: $bottom; } /* [2] */
  @if ($left   != null) { left:   $left; } /* [2] */
}
